#include <iostream>
#include <string>
using namespace std;

struct Stack{
    int size;
    int top;
    char *s;
};

void create(struct Stack *st,string infix){
    st->size=infix.length();
    st->top=-1;
    st->s=new char[st->size];
}

void push(struct Stack *st,char x){
    if(st->top==st->size-1){
        cout<<"stack overflow!"<<endl;
    }
    else{
        st->top++;
        st->s[st->top]=x;
    }}

char pop(struct Stack *st){
    int x=-1;
    if(st->top==-1){
        cout<<"stack underflow!"<<endl;
    }
    else{
        x=st->s[st->top];
        st->top--;
    }
    return x;
}   
   
char stackTop(struct Stack st){
    if(st.top==-1){
        return -1;
    }
    else{
        return st.s[st.top];
    }}
    
int isFull(struct Stack st){
    if(st.top==st.size-1){
        return 1;
    }
    else{
        return 0;}
}
    
int isEmpty(struct Stack st){
    if(st.top==-1){
        return 1;
    }
    else{
        return 0;}
    
}

int precedence(char x){
    if(x=='^'){return 3;} 
    else if(x=='*' || x=='/'){return 2;}
    else if(x=='+' || x=='-'){return 1;}  
    else{return 0;}
}

bool isOperand(char x){
    if(x=='(' || x==')' || x=='^' || x=='*' || x=='/' || x=='+' || x=='-'){ return false;}
    else{return true;}
}

string convert(string infix){
    struct Stack st;
    create(&st,infix);
    string postfix="";
    int i=0;
    while(infix[i]!='\0'){
        if(isOperand(infix[i])){
            postfix+=infix[i++];
        }
        else if (infix[i] == '(') {
            push(&st,infix[i++]);
        } 
        else if (infix[i] == ')') {
            while (!isEmpty(st) && stackTop(st) != '(')
                postfix += pop(&st);
            pop(&st);
            i++;
        } 
        else{
           while(!isEmpty(st) && precedence(infix[i])<=precedence(stackTop(st))){
                postfix+=pop(&st);}
            push(&st,infix[i++]);
            }
        }
    while(!isEmpty(st)){
        postfix+=pop(&st);
    }
    return postfix;
}
   
int main(){
    string infix="a+b*(c^d-e)^(f+g*h)-i";
    cout<<"Infix exp: "<<infix<<endl;
    cout<<"Postfix exp: "<<convert(infix);
    return 0;
}
